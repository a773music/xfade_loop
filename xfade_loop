#!/usr/bin/env python
# -*- coding: utf-8 -*-
import sys, optparse, os, platform
system = platform.system()

# be friendly about pydub possibly not being installed
try:
    from pydub import AudioSegment
    from pydub.playback import play
except:
    if system == 'Linux': # we're on linux
        print 'you need to install pydub'
        print '$ pip install pydub'
    elif system == 'Darwin': # we're on mac
        print 'you need to install pydub'
        print '$ curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py'
        print '$ python get-pip.py'
        print '$ pip install pydub'
    elif system == 'Windows': # we're on windows
        print 'you need to install pydub (and probably pip as well)'
    else: # we're on unknown system
        print 'you need to install pydub (and probably pip as well)'
    sys.exit()

# setup help
if len(sys.argv) == 1:
    sys.argv.append('-h')
elif '-?' in sys.argv:
    sys.argv.remove('-?')
    sys.argv.append('-h')  

# parse options
parser = optparse.OptionParser()
parser.add_option('-l', '--length', action='store_true', dest='display_length', help='Display length (ms) of input sample', default=False)
parser.add_option('-x', '', type='float', dest='xfade_length', help='Cross fade length (ms), default: 1000', default=1000)
parser.add_option('-s', '--loop-start', type='float', dest='loop_start', help='Start the loop after this time (ms), default: 0', default=0)
parser.add_option('-e', '--loop-end', type='float', dest='loop_end', help='End the loop after this time (ms), default: 0', default=0)
parser.add_option('-g', '--gap-length', type='float', dest='gap_length', help='Insert a gap this long (ms) in the sample just before the loop start, default: 0', default=0)
#parser.add_option('', '--slc', action="store_true", dest='generate_slc', help='Generate .slc file (suitable for the er-301 eurorack module)', default=False)
parser.add_option('-o', '', action="store_true", dest='overwrite_in_file', help='Overwrite input file', default=False)
parser.add_option('-f', '', action="store_true", dest='force_overwrite', help='Overwrite existing output files', default=False)
(options, args) = parser.parse_args()

def get_duration(audio):
    duration = audio.duration_seconds * 1000
    return duration

def xfade(original):
    # slices before loop (marked slices are of xfade length):
    #   _____        ___
    # | begin middle end |
    #
    # slices after loop:
    #          _________ 
    # | middle end>begin |
    duration = get_duration(original)
    xfade_length = options.xfade_length
    # shorten xfade_length, if unsane
    if duration < xfade_length:
        xfade_length = duration
    # cut the chunks we need
    begin = original[:xfade_length]
    middle = original[xfade_length:xfade_length * -1]
    end = original[xfade_length * -1:]
    # generate the fade
    end_begin = end.append(begin, crossfade=xfade_length)
    # splice back together
    result = middle + end_begin
    return result
    
def xfade_start(original):
    # slices before loop (marked slices are of xfade length):
    #       ___   _____        ___
    # start pre | begin middle end |
    #
    # slices after loop:
    #       _________              _________
    # start pre>begin gap | middle end>begin |
    duration = get_duration(original)
    xfade_length = options.xfade_length
    # shorten xfade_length, if unsane
    if duration - options.loop_start < xfade_length:
        xfade_length = duration - options.loop_start
    if options.loop_start < xfade_length:
        xfade_length = options.loop_start
    # cut chunks we need
    start = original[:options.loop_start-xfade_length]
    pre = original[options.loop_start-xfade_length:options.loop_start]
    begin = original[options.loop_start:options.loop_start+xfade_length]
    middle = original[options.loop_start+xfade_length:xfade_length * -1]
    end = original[xfade_length * -1:]
    # generate the fades
    pre_begin = pre.append(begin, crossfade=xfade_length)
    end_begin = end.append(begin, crossfade=xfade_length)
    # splice back together
    if options.gap_length:
        gap = AudioSegment.silent(duration=options.gap_length)
        result = start + pre_begin + gap + middle + end_begin
    else:
        result = start + pre_begin + middle + end_begin
    return result

def xfade_end(original):
    # slices before loop (marked slices are of xfade length):
    # _____ 1 _______ 2         3 ___ 4 ____ 5
    # begin   middle1   middle2   end | post   stop
    #
    # slices after loop:
    # _______         _________       ____________
    # middle1 middle2 end>begin gap | middle1>post stop
    duration = get_duration(original)
    xfade_length = options.xfade_length
    # shorten xfade_length, if unsane
    if duration - options.loop_end < xfade_length:
        xfade_length = duration - options.loop_end
    if options.loop_end < xfade_length:
        xfade_length = options.loop_end
    # cut chunks we need
    cut1 = options.xfade_length
    cut2 = options.xfade_length * 2
    cut4 = options.loop_end
    cut3 = options.loop_end - xfade_length
    cut5 = options.loop_end + xfade_length
    begin = original[:cut1]
    middle1 = original[cut1:cut2]
    middle2 = original[cut2:cut3]
    end = original[cut3:cut4]
    post = original[cut4:cut5]
    stop = original[cut5:]

    # generate the fades
    end_begin = end.append(begin, crossfade=xfade_length)
    middle1_post = middle1.append(post, crossfade=xfade_length)
    # splice back together
    if options.gap_length:
        gap = AudioSegment.silent(duration=options.gap_length)
        result = middle1 + middle2 + end_begin + gap + middle1_post + stop
    else:
        result = middle1 + middle2 + end_begin + middle1_post + stop
    return result


    
def xfade_start_end(original):
    # slices before loop (marked slices are of xfade length):
    #      1  ___ 2 _____ 3 _______ 4         5 ___ 6 ____ 7
    # start   pre | begin   middle1   middle2   end | post   stop
    #
    # slices after loop:
    #       _________       _______         _________       ____________
    # start pre>begin gap | middle1 middle2 end>begin gap | middle1>post stop
    duration = get_duration(original)
    xfade_length = options.xfade_length
    # shorten xfade_length, if unsane
    if duration - options.loop_end < xfade_length:
        xfade_length = duration - options.loop_end
    if options.loop_end < xfade_length:
        xfade_length = options.loop_end
    if options.loop_start < xfade_length:
        xfade_length = options.loop_start

    if options.loop_end < options.loop_start:
        print 'error: loop end is before loop start...'
        sys.exit()
    # cut chunks we need
    cut2 = options.loop_start
    cut6 = options.loop_end
    cut1 = cut2 - xfade_length
    cut3 = cut2 + xfade_length
    cut4 = cut3 + xfade_length
    cut5 = cut6 - xfade_length
    cut7 = cut6 + xfade_length
    start = original[:cut1]
    pre = original[cut1:cut2]
    begin = original[cut2:cut3]
    middle1 = original[cut3:cut4]
    middle2 = original[cut4:cut5]
    end = original[cut5:cut6]
    post = original[cut6:cut7]
    stop = original[cut7:]
    # generate the fades
    pre_begin = pre.append(begin, crossfade=xfade_length)
    end_begin = end.append(begin, crossfade=xfade_length)
    middle1_post = middle1.append(post, crossfade=xfade_length)
    # splice back together
    if options.gap_length:
        gap = AudioSegment.silent(duration=options.gap_length)
        result = start + pre_begin + gap + middle1 + middle2 + end_begin + gap + middle1_post + stop
    else:
        result = start + pre_begin + middle1 + middle2 + end_begin + middle1_post + stop
    return result

# it doesn't make sense to make gaps, when properly handling the looppoints
if options.generate_slc:
    print 'setting gap to 0, since you\'re outputting .slc...'
    options.gap_length = 0

for in_file in args:
    # read the file
    original = AudioSegment.from_file(in_file, format="wav")

    # only display length
    if options.display_length:
        print in_file + ': ' + str(get_duration(original)) + ' ms'
        sys.exit()

    # sanity check:
    if not os.path.isfile(in_file):
        print 'error: ' + in_file + ' is not a file...'
        continue
    # handle out_file
    basename, ext = os.path.splitext(in_file)
    out_file = basename + '_loop' + ext
    if options.overwrite_in_file:
        out_file = in_file
    elif os.path.isfile(out_file) and not options.force_overwrite:
        print 'error: output ' + out_file + ' exists, use -f to overwrite'
        continue

    # adjust insane combinations of options
    if options.gap_length and not (options.loop_start or options.loop_end):
        print 'setting gap-length to 0!'
        options.gap_length = 0

    # branch out
    if not options.loop_start and not options.loop_end:
        result = xfade(original)
    elif options.loop_start and not options.loop_end:
        result = xfade_start(original)
    elif not options.loop_start and options.loop_end:
        result = xfade_end(original)
    elif options.loop_start and options.loop_end:
        result = xfade_start_end(original)

    if result:
        result.export(out_file, format="wav")
    else:
        print 'you called an unimplemented branch, ' + out_file + ' not written...'
